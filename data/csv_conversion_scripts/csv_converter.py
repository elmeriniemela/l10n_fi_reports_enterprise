#!/usr/bin/env python
# coding: utf-8

import csv
import os
import re

from lxml import etree
from lxml.builder import E


class CsvConverter:

    MODEL = 'account.financial.html.report.line'
    
    convert_fields = {
        "Action/ID": "action_id",
        "Code": "code",
        "Display Name": "display_name",
        "Domain": "domain",
        "Type": "figure_type",
        "Financial Report/ID": "financial_report_id",
        "Formulas": "formulas",
        "Is growth good when positive": "green_on_positive",
        "Group by": "groupby",
        "Hide If Zero": "hide_if_zero",
        "Level": "level",
        "Section Name": "name",
        "Parent/ID": "parent_id",
        "Print On New Page": "print_on_new_page",
        "Sequence": "sequence",
        "Show Domain": "show_domain",
        "Special Date Changer": "special_date_changer"
    }
    
    special_date_changer_label2value = {
        'From the beginning': 'from_beginning',
        'At the beginning of the period': 'to_beginning_of_period',
        'Use given dates': 'normal',
        'Force given dates for all accounts and account types': 'strict_range',
        'From the beginning of the fiscal year': 'from_fiscalyear'
    
    }
    
    figure_type_label2value = {
        'Float': 'float',
        'Percents': 'percents',
        'No Unit': 'no_unit'
    }
    
    

    
    
    def getkey(self, elem):
        # Used for sorting
        return int(elem.find("field[@name='level']").text)
    
    
    export_id2new_id = {}
    
    
    def convert_csv2xml(self, csv_file, xml_file, main_report_id, xml_id_prefix):
        data_element = E.data()
        odoo_element = E.odoo(data_element)
        
        # TODO Open csv file in loop
        with open(csv_file) as csvfile:
            reader = csv.DictReader(csvfile)
        
            for data in reader:
                self.export_id2new_id[data.get('External ID')] = xml_id_prefix + data.get("Code").lower()
        
            if len(list(self.export_id2new_id.values())) != len(set(list(self.export_id2new_id.values()))):
                print("dublicate ids")
                quit()
        
        with open(csv_file) as csvfile:
            reader = csv.DictReader(csvfile)
        
            for data in reader:
                line_record = E.record(model=self.MODEL, id=(xml_id_prefix + data.get("Code").lower()))
                for label, name in self.convert_fields.items():
                    if data.get(label, False):
        
                        if (label == "Parent/ID"):
                            # Converison of random export id to id generated by script
                            line_record.append(E.field(ref=self.export_id2new_id[data.get(label)], name=name))
        
        
                        elif (label == "Financial Report/ID"):
                            # Converison of random export id to id generated by script
                            line_record.append(E.field(ref=main_report_id, name=name))
        
                        elif (label == "Type"):
                            line_record.append(E.field(self.figure_type_label2value[data.get(label)], name=name))
        
                        elif (label == "Special Date Changer"):
                            line_record.append(E.field(self.special_date_changer_label2value[data.get(label)], name=name))
        
                        elif (label == "Show Domain"):
                            line_record.append(E.field(data.get(label).lower(), name=name))
        
                        elif (label == "Domain"):
                            # %(fbv_vexpress.carrier_vexpress)d
                            domain = data.get(label)
                            
                            eval_value = self.convert_domain(domain)
                            
                            line_record.append(
                                E.field(name=name, eval=eval_value))
        
        
        
        
                        else:
                            line_record.append(E.field(data.get(label), name=name))
        
                data_element.append(line_record)
        
        data_element[:] = sorted(data_element, key=self.getkey)
        
        tree = etree.ElementTree(odoo_element)
        tree.write(xml_file, pretty_print=True, xml_declaration=True, encoding="utf-8")
        
    def convert_domain(self, domain):
        return domain
